{"ast":null,"code":"import { LOGIN_URL, ME_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from \"../_redux/authCrud\";\nimport userTableMock from \"./userTableMock\";\nexport default function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(({\n    data\n  }) => {\n    const {\n      email,\n      password\n    } = JSON.parse(data);\n\n    if (email && password) {\n      const user = userTableMock.find(x => x.email.toLowerCase() === email.toLowerCase() && x.password === password);\n\n      if (user) {\n        return [200, { ...user,\n          password: undefined\n        }];\n      }\n    }\n\n    return [400];\n  });\n  mock.onPost(REGISTER_URL).reply(({\n    data\n  }) => {\n    const {\n      email,\n      fullname,\n      username,\n      password\n    } = JSON.parse(data);\n\n    if (email && fullname && username && password) {\n      const user = {\n        id: generateUserId(),\n        email,\n        fullname,\n        username,\n        password,\n        roles: [2],\n        accessToken: \"access-token-\" + Math.random(),\n        refreshToken: \"access-token-\" + Math.random(),\n        pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\n      };\n      userTableMock.push(user);\n      return [200, { ...user,\n        password: undefined\n      }];\n    }\n\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({\n    data\n  }) => {\n    const {\n      email\n    } = JSON.parse(data);\n\n    if (email) {\n      const user = userTableMock.find(x => x.email.toLowerCase() === email.toLowerCase());\n      console.log(user === null || user === void 0 ? void 0 : user.password);\n\n      if (user) {\n        //user.password = undefined;\n        // user.password = undefined;\n        return [200, { ...user,\n          password: undefined\n        }];\n      }\n    }\n\n    return [400];\n  });\n  mock.onGet(ME_URL).reply(({\n    headers: {\n      Authorization\n    }\n  }) => {\n    const accessToken = Authorization && Authorization.startsWith(\"Bearer \") && Authorization.slice(\"Bearer \".length);\n\n    if (accessToken) {\n      const user = userTableMock.find(x => x.accessToken === accessToken);\n\n      if (user) {\n        return [200, { ...user,\n          password: undefined\n        }];\n      }\n    }\n\n    return [401];\n  });\n\n  function generateUserId() {\n    const ids = userTableMock.map(el => el.id);\n    const maxId = Math.max(...ids);\n    return maxId + 1;\n  }\n}","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/Auth/__mocks__/mockAuth.tsx"],"names":["LOGIN_URL","ME_URL","REGISTER_URL","REQUEST_PASSWORD_URL","userTableMock","mockAuth","mock","onPost","reply","data","email","password","JSON","parse","user","find","x","toLowerCase","undefined","fullname","username","id","generateUserId","roles","accessToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","push","console","log","onGet","headers","Authorization","startsWith","slice","length","ids","map","el","maxId","max"],"mappings":"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","sourcesContent":["import MockAdapter from \"axios-mock-adapter/types\";\r\nimport {\r\n  LOGIN_URL,\r\n  ME_URL,\r\n  REGISTER_URL,\r\n  REQUEST_PASSWORD_URL\r\n} from \"../_redux/authCrud\";\r\nimport userTableMock from \"./userTableMock\";\r\n\r\nexport default function mockAuth(mock: MockAdapter){\r\n  mock.onPost(LOGIN_URL).reply(({ data }) => {\r\n    const { email, password } = JSON.parse(data);\r\n\r\n    if (email && password) {\r\n      const user = userTableMock.find(\r\n        x =>\r\n          x.email.toLowerCase() === email.toLowerCase() &&\r\n          x.password === password\r\n      );\r\n\r\n      if (user) {\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onPost(REGISTER_URL).reply(({ data }): (number | { password: undefined; id: number; email: any; fullname: any; username: any; roles: number[]; accessToken: string; refreshToken: string; pic: string; })[] => {\r\n      const { email, fullname, username, password } = JSON.parse(data);\r\n\r\n      if (email && fullname && username && password) {\r\n        const user = {\r\n          id: generateUserId(),\r\n          email,\r\n          fullname,\r\n          username,\r\n          password,\r\n          roles: [2],\r\n          accessToken: \"access-token-\" + Math.random(),\r\n          refreshToken: \"access-token-\" + Math.random(),\r\n          pic: process.env.PUBLIC_URL + \"/media/users/default.jpg\"\r\n        };\r\n\r\n        userTableMock.push(user);\r\n\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n\r\n      return [400];\r\n    });\r\n\r\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({ data }) => {\r\n    const { email } = JSON.parse(data);\r\n\r\n    if (email) {\r\n      const user = userTableMock.find(\r\n        x => x.email.toLowerCase() === email.toLowerCase()\r\n      );\r\n      console.log(user?.password);\r\n      if (user) {\r\n        //user.password = undefined;\r\n        // user.password = undefined;\r\n\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [400];\r\n  });\r\n\r\n  mock.onGet(ME_URL).reply(({ headers: { Authorization } }) => {\r\n    const accessToken =\r\n      Authorization &&\r\n      Authorization.startsWith(\"Bearer \") &&\r\n      Authorization.slice(\"Bearer \".length);\r\n\r\n    if (accessToken) {\r\n      const user = userTableMock.find(x => x.accessToken === accessToken);\r\n\r\n      if (user) {\r\n        return [200, { ...user, password: undefined }];\r\n      }\r\n    }\r\n\r\n    return [401];\r\n  });\r\n\r\n  function generateUserId() {\r\n    const ids = userTableMock.map(el => el.id);\r\n    const maxId = Math.max(...ids);\r\n    return maxId + 1;\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}