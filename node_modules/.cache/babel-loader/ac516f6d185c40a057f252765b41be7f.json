{"ast":null,"code":"// eslint-disable-next-line\nexport default class MockUtils {\n  /**\r\n   * Filtration with sorting\r\n   * First do Sort then filter\r\n   *\r\n   * @param _entities: any[]\r\n   * @param _queryParams: QueryParamsModel\r\n   * @param _filtrationFields: string[]\r\n   */\n  baseFilter(_entities, _queryParams, _filtrationFields = []) {\n    // Filtration\n    let entitiesResult = this.searchInArray(_entities, _queryParams.filter, _filtrationFields); // Sorting\n    // start\n\n    if (_queryParams.sortField) {\n      entitiesResult = this.sortArray(entitiesResult, _queryParams.sortField, _queryParams.sortOrder);\n    } // end\n    // Paginator\n    // start\n\n\n    const pageNumber = _queryParams.pageNumber - 1;\n    const totalCount = entitiesResult.length;\n    const initialPos = pageNumber * _queryParams.pageSize;\n    entitiesResult = entitiesResult.slice(initialPos, initialPos + _queryParams.pageSize); // end\n\n    const queryResults = {\n      entities: entitiesResult,\n      totalCount: totalCount,\n      errorMessage: \"\"\n    };\n    return queryResults;\n  }\n  /**\r\n   * Sort array by field name and order-type\r\n   * @param _incomingArray: any[]\r\n   * @param _sortField: string\r\n   * @param _sortOrder: string\r\n   */\n\n\n  sortArray(_incomingArray, _sortField = \"\", _sortOrder = \"asc\") {\n    if (!_sortField) {\n      return _incomingArray;\n    }\n\n    let result = [];\n    result = _incomingArray.sort((a, b) => {\n      if (a[_sortField] < b[_sortField]) {\n        return _sortOrder === \"asc\" ? -1 : 1;\n      }\n\n      if (a[_sortField] > b[_sortField]) {\n        return _sortOrder === \"asc\" ? 1 : -1;\n      }\n\n      return 0;\n    });\n    return result;\n  }\n  /**\r\n   * Filter array by some fields\r\n   *\r\n   * @param _incomingArray: any[]\r\n   * @param _queryObj: any\r\n   * @param _filtrationFields: string[]\r\n   */\n\n\n  searchInArray(_incomingArray, _queryObj, _filtrationFields = []) {\n    const result = [];\n    let resultBuffer = [];\n    const indexes = [];\n    let firstIndexes = [];\n    let doSearch = false;\n\n    _filtrationFields.forEach(item => {\n      if (item in _queryObj) {\n        _incomingArray.forEach((element, index) => {\n          if (element[item] === _queryObj[item]) {\n            firstIndexes.push(index);\n          }\n        });\n\n        firstIndexes.forEach(element => {\n          resultBuffer.push(_incomingArray[element]);\n        });\n        _incomingArray = resultBuffer.slice(0);\n        resultBuffer = [].slice(0);\n        firstIndexes = [].slice(0);\n      }\n    });\n\n    Object.keys(_queryObj).forEach(key => {\n      const searchText = _queryObj[key].toString().trim().toLowerCase();\n\n      if (key && !_filtrationFields.some(e => e === key) && searchText) {\n        doSearch = true;\n\n        try {\n          _incomingArray.forEach((element, index) => {\n            if (element[key] || element[key] === 0 && searchText === \"0\") {\n              const _val = element[key].toString().trim().toLowerCase();\n\n              if (_val.indexOf(searchText) > -1 && indexes.indexOf(index) === -1) {\n                indexes.push(index);\n              }\n            }\n          });\n        } catch (ex) {\n          console.log(ex, key, searchText);\n        }\n      }\n    });\n\n    if (!doSearch) {\n      return _incomingArray;\n    }\n\n    indexes.forEach(re => {\n      result.push(_incomingArray[re]);\n    });\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/__mocks__/mock.utils.tsx"],"names":["MockUtils","baseFilter","_entities","_queryParams","_filtrationFields","entitiesResult","searchInArray","filter","sortField","sortArray","sortOrder","pageNumber","totalCount","length","initialPos","pageSize","slice","queryResults","entities","errorMessage","_incomingArray","_sortField","_sortOrder","result","sort","a","b","_queryObj","resultBuffer","indexes","firstIndexes","doSearch","forEach","item","element","index","push","Object","keys","key","searchText","toString","trim","toLowerCase","some","e","_val","indexOf","ex","console","log","re"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\r\nexport default class MockUtils {\r\n  /**\r\n   * Filtration with sorting\r\n   * First do Sort then filter\r\n   *\r\n   * @param _entities: any[]\r\n   * @param _queryParams: QueryParamsModel\r\n   * @param _filtrationFields: string[]\r\n   */\r\n  baseFilter(_entities: any[], _queryParams: { filter: any; sortField: string | undefined; sortOrder: string | undefined; pageNumber: number; pageSize: number; }, _filtrationFields = []) {\r\n    // Filtration\r\n    let entitiesResult = this.searchInArray(\r\n      _entities,\r\n      _queryParams.filter,\r\n      _filtrationFields\r\n    );\r\n\r\n    // Sorting\r\n    // start\r\n    if (_queryParams.sortField) {\r\n      entitiesResult = this.sortArray(\r\n        entitiesResult,\r\n        _queryParams.sortField,\r\n        _queryParams.sortOrder\r\n      );\r\n    }\r\n    // end\r\n\r\n    // Paginator\r\n    // start\r\n    const pageNumber = _queryParams.pageNumber - 1;\r\n    const totalCount = entitiesResult.length;\r\n    const initialPos = pageNumber * _queryParams.pageSize;\r\n    entitiesResult = entitiesResult.slice(\r\n      initialPos,\r\n      initialPos + _queryParams.pageSize\r\n    );\r\n    // end\r\n\r\n    const queryResults = {\r\n      entities: entitiesResult,\r\n      totalCount: totalCount,\r\n      errorMessage: \"\"\r\n    };\r\n    return queryResults;\r\n  }\r\n\r\n  /**\r\n   * Sort array by field name and order-type\r\n   * @param _incomingArray: any[]\r\n   * @param _sortField: string\r\n   * @param _sortOrder: string\r\n   */\r\n  sortArray(_incomingArray: any[], _sortField = \"\", _sortOrder = \"asc\") {\r\n    if (!_sortField) {\r\n      return _incomingArray;\r\n    }\r\n\r\n    let result = [];\r\n    result = _incomingArray.sort((a, b) => {\r\n      if (a[_sortField] < b[_sortField]) {\r\n        return _sortOrder === \"asc\" ? -1 : 1;\r\n      }\r\n\r\n      if (a[_sortField] > b[_sortField]) {\r\n        return _sortOrder === \"asc\" ? 1 : -1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Filter array by some fields\r\n   *\r\n   * @param _incomingArray: any[]\r\n   * @param _queryObj: any\r\n   * @param _filtrationFields: string[]\r\n   */\r\n  searchInArray(_incomingArray: any[], _queryObj: { [x: string]: { toString: () => string; }; }, _filtrationFields = []) {\r\n    const result: any[] = [];\r\n    let resultBuffer: any[] = [];\r\n    const indexes: number[] = [];\r\n    let firstIndexes: number[] = [];\r\n    let doSearch = false;\r\n\r\n    _filtrationFields.forEach(item => {\r\n      if (item in _queryObj) {\r\n        _incomingArray.forEach((element, index) => {\r\n          if (element[item] === _queryObj[item]) {\r\n            firstIndexes.push(index);\r\n          }\r\n        });\r\n        firstIndexes.forEach(element => {\r\n          resultBuffer.push(_incomingArray[element]);\r\n        });\r\n        _incomingArray = resultBuffer.slice(0);\r\n        resultBuffer = [].slice(0);\r\n        firstIndexes = [].slice(0);\r\n      }\r\n    });\r\n\r\n    Object.keys(_queryObj).forEach(key => {\r\n      const searchText = _queryObj[key]\r\n        .toString()\r\n        .trim()\r\n        .toLowerCase();\r\n      if (key && !_filtrationFields.some(e => e === key) && searchText) {\r\n        doSearch = true;\r\n        try {\r\n          _incomingArray.forEach((element, index) => {\r\n            if (element[key] || (element[key] === 0 && searchText === \"0\")) {\r\n              const _val = element[key]\r\n                .toString()\r\n                .trim()\r\n                .toLowerCase();\r\n              if (\r\n                _val.indexOf(searchText) > -1 &&\r\n                indexes.indexOf(index) === -1\r\n              ) {\r\n                indexes.push(index);\r\n              }\r\n            }\r\n          });\r\n        } catch (ex) {\r\n          console.log(ex, key, searchText);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!doSearch) {\r\n      return _incomingArray;\r\n    }\r\n\r\n    indexes.forEach(re => {\r\n      result.push(_incomingArray[re]);\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}