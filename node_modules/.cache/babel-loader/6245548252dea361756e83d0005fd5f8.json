{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/khatnaa/Desktop/project/src/app/modules/ECommerce/pages/products/product-specifications/specification-edit-dialog/SpecificationEditForm.tsx\";\nimport React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Select, Input } from \"../../../../../../../_metronic/_partials/controls\";\nimport { SPECIFICATIONS_DICTIONARY } from \"../SpecificationsUIHelper\"; // Validation schema\n\nconst SpecificationEditSchema = Yup.object().shape({\n  value: Yup.string().min(2, \"Minimum 2 symbols\").max(50, \"Maximum 50 symbols\").required(\"Value is required\"),\n  specId: Yup.number().required(\"Specification type is required\")\n});\nexport function SpecificationEditForm({\n  saveSpecification,\n  specification,\n  actionsLoading,\n  onHide\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: specification,\n      validationSchema: SpecificationEditSchema,\n      onSubmit: values => {\n        saveSpecification(values);\n      },\n      children: ({\n        handleSubmit\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Modal.Body, {\n          className: \"overlay overlay-block cursor-default\",\n          children: [actionsLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay-layer bg-transparent\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner spinner-lg spinner-success\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            className: \"form form-label-right\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group row\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-lg-12\",\n                children: /*#__PURE__*/_jsxDEV(Select, {\n                  name: \"specId\",\n                  label: \"Specification Type\",\n                  children: SPECIFICATIONS_DICTIONARY.map(spec => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: spec.id,\n                    children: spec.name\n                  }, spec.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 49,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group row\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-lg-12\",\n                children: /*#__PURE__*/_jsxDEV(Field, {\n                  name: \"value\",\n                  component: Input,\n                  placeholder: \"Value\",\n                  label: \"Value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onHide,\n            className: \"btn btn-light btn-elevate\",\n            children: \"\\u0426\\u0443\\u0446\\u043B\\u0430\\u0445\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \" \"\n          }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: () => handleSubmit(),\n            className: \"btn btn-primary btn-elevate\",\n            children: \"\\u0425\\u0430\\u0434\\u0433\\u0430\\u043B\\u0430\\u0445\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = SpecificationEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpecificationEditForm\");","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/pages/products/product-specifications/specification-edit-dialog/SpecificationEditForm.tsx"],"names":["React","Modal","Formik","Form","Field","Yup","Select","Input","SPECIFICATIONS_DICTIONARY","SpecificationEditSchema","object","shape","value","string","min","max","required","specId","number","SpecificationEditForm","saveSpecification","specification","actionsLoading","onHide","values","handleSubmit","map","spec","id","name"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Select,\r\n  Input,\r\n} from \"../../../../../../../_metronic/_partials/controls\";\r\nimport { SPECIFICATIONS_DICTIONARY } from \"../SpecificationsUIHelper\";\r\n\r\n// Validation schema\r\nconst SpecificationEditSchema = Yup.object().shape({\r\n  value: Yup.string()\r\n    .min(2, \"Minimum 2 symbols\")\r\n    .max(50, \"Maximum 50 symbols\")\r\n    .required(\"Value is required\"),\r\n  specId: Yup.number().required(\"Specification type is required\"),\r\n});\r\n\r\nexport function SpecificationEditForm({\r\n  saveSpecification,\r\n  specification,\r\n  actionsLoading,\r\n  onHide,\r\n}) {\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={specification}\r\n        validationSchema={SpecificationEditSchema}\r\n        onSubmit={(values) => {\r\n          saveSpecification(values);\r\n        }}\r\n      >\r\n        {({ handleSubmit }) => (\r\n          <>\r\n            <Modal.Body className=\"overlay overlay-block cursor-default\">\r\n              {actionsLoading && (\r\n                <div className=\"overlay-layer bg-transparent\">\r\n                  <div className=\"spinner spinner-lg spinner-success\" />\r\n                </div>\r\n              )}\r\n              <Form className=\"form form-label-right\">\r\n                <div className=\"form-group row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <Select name=\"specId\" label=\"Specification Type\">\r\n                      {SPECIFICATIONS_DICTIONARY.map((spec) => (\r\n                        <option key={spec.id} value={spec.id}>\r\n                          {spec.name}\r\n                        </option>\r\n                      ))}\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-group row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <Field\r\n                      name=\"value\"\r\n                      component={Input}\r\n                      placeholder=\"Value\"\r\n                      label=\"Value\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <button\r\n                type=\"button\"\r\n                onClick={onHide}\r\n                className=\"btn btn-light btn-elevate\"\r\n              >\r\n                Цуцлах\r\n              </button>\r\n              <> </>\r\n              <button\r\n                type=\"submit\"\r\n                onClick={() => handleSubmit()}\r\n                className=\"btn btn-primary btn-elevate\"\r\n              >\r\n                Хадгалах\r\n              </button>\r\n            </Modal.Footer>\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}