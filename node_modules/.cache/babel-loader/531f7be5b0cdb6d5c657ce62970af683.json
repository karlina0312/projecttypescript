{"ast":null,"code":"import * as requestFromServer from \"./specificationsCrud\";\nimport { specificationsSlice, callTypes } from \"./specificationsSlice\";\nconst {\n  actions\n} = specificationsSlice;\nexport const fetchSpecifications = (queryParams, productId) => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.list\n  }));\n\n  if (!productId) {\n    return dispatch(actions.specificationsFetched({\n      totalCount: 0,\n      entities: null\n    }));\n  }\n\n  return requestFromServer.findSpecifications(queryParams, productId).then(response => {\n    const {\n      totalCount,\n      entities\n    } = response.data;\n    dispatch(actions.specificationsFetched({\n      totalCount,\n      entities\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't find specifications\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.list\n    }));\n  });\n};\nexport const fetchSpecification = id => dispatch => {\n  if (!id) {\n    return dispatch(actions.specificationFetched({\n      specificationForEdit: undefined\n    }));\n  }\n\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.getSpecificationById(id).then(response => {\n    const specification = response.data;\n    dispatch(actions.specificationFetched({\n      specificationForEdit: specification\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't find specification\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const deleteSpecification = id => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.deleteSpecification(id).then(response => {\n    dispatch(actions.specificationDeleted({\n      id\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't delete specification\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const createSpecification = specificationForCreation => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.createSpecification(specificationForCreation).then(response => {\n    const {\n      specification\n    } = response.data;\n    dispatch(actions.specificationCreated({\n      specification\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't create specification\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const updateSpecification = specification => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.updateSpecification(specification).then(() => {\n    dispatch(actions.specificationUpdated({\n      specification\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't update specification\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const deleteSpecifications = ids => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.deleteSpecifications(ids).then(() => {\n    dispatch(actions.specificationsDeleted({\n      ids\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't delete specifications\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/_redux/specifications/specificationsActions.tsx"],"names":["requestFromServer","specificationsSlice","callTypes","actions","fetchSpecifications","queryParams","productId","dispatch","startCall","callType","list","specificationsFetched","totalCount","entities","findSpecifications","then","response","data","catch","error","clientMessage","catchError","fetchSpecification","id","specificationFetched","specificationForEdit","undefined","action","getSpecificationById","specification","deleteSpecification","specificationDeleted","createSpecification","specificationForCreation","specificationCreated","updateSpecification","specificationUpdated","deleteSpecifications","ids","specificationsDeleted"],"mappings":"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","sourcesContent":["import * as requestFromServer from \"./specificationsCrud\";\r\nimport {specificationsSlice, callTypes} from \"./specificationsSlice\";\r\n\r\nconst {actions} = specificationsSlice;\r\n\r\nexport const fetchSpecifications = (queryParams: any, productId: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  if (!productId) {\r\n    return dispatch(\r\n      actions.specificationsFetched({ totalCount: 0, entities: null })\r\n    );\r\n  }\r\n\r\n  return requestFromServer\r\n    .findSpecifications(queryParams, productId)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.specificationsFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find specifications\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchSpecification = (id: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  if (!id) {\r\n    return dispatch(\r\n      actions.specificationFetched({ specificationForEdit: undefined })\r\n    );\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getSpecificationById(id)\r\n    .then(response => {\r\n      const specification = response.data;\r\n      dispatch(\r\n        actions.specificationFetched({ specificationForEdit: specification })\r\n      );\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteSpecification = (id: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteSpecification(id)\r\n    .then(response => {\r\n      dispatch(actions.specificationDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createSpecification = (specificationForCreation: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createSpecification(specificationForCreation)\r\n    .then(response => {\r\n      const { specification } = response.data;\r\n      dispatch(actions.specificationCreated({ specification }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateSpecification = (specification: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateSpecification(specification)\r\n    .then(() => {\r\n      dispatch(actions.specificationUpdated({ specification }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update specification\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteSpecifications = (ids: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteSpecifications(ids)\r\n    .then(() => {\r\n      dispatch(actions.specificationsDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete specifications\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}