{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/khatnaa/Desktop/project/src/_metronic/i18n/Metronici18n.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext } from \"react\";\nimport { useMemo } from \"react\";\nimport { useContext } from \"react\";\nconst I18N_CONFIG_KEY = process.env.REACT_APP_I18N_CONFIG_KEY || \"i18nConfig\";\nconst initialState = {\n  selectedLang: \"en\"\n};\n\nfunction getConfig() {\n  const ls = localStorage.getItem(I18N_CONFIG_KEY);\n\n  if (ls) {\n    try {\n      return JSON.parse(ls);\n    } catch (er) {\n      console.error(er);\n    }\n  }\n\n  return initialState;\n} // Side effect\n\n\nexport function setLanguage(lang) {\n  localStorage.setItem(I18N_CONFIG_KEY, JSON.stringify({\n    selectedLang: lang\n  }));\n  window.location.reload();\n}\nconst I18nContext = /*#__PURE__*/createContext();\nexport function useLang() {\n  _s();\n\n  return useContext(I18nContext).selectedLang;\n}\n\n_s(useLang, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function withI18n(Component) {\n  class WithI18n extends React.Component {\n    render() {\n      return /*#__PURE__*/_jsxDEV(Component, { ...this.props,\n        menu: this.context\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this);\n    }\n\n  }\n\n  WithI18n.displayName = `WithI18n(${Component.displayName || Component.name})`;\n  WithI18n.contextType = I18nContext;\n  return WithI18n;\n}\nexport const I18nConsumer = I18nContext.Consumer;\nexport function MetronicI18nProvider({\n  children\n}) {\n  _s2();\n\n  const lang = useMemo(getConfig, []);\n  return /*#__PURE__*/_jsxDEV(I18nContext.Provider, {\n    value: lang,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(MetronicI18nProvider, \"JPbsw2DM2W6Lzsm72+vmIjecq1I=\");\n\n_c = MetronicI18nProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MetronicI18nProvider\");","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/_metronic/i18n/Metronici18n.js"],"names":["React","createContext","useMemo","useContext","I18N_CONFIG_KEY","process","env","REACT_APP_I18N_CONFIG_KEY","initialState","selectedLang","getConfig","ls","localStorage","getItem","JSON","parse","er","console","error","setLanguage","lang","setItem","stringify","window","location","reload","I18nContext","useLang","withI18n","Component","WithI18n","render","props","context","displayName","name","contextType","I18nConsumer","Consumer","MetronicI18nProvider","children"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,UAAR,QAAyB,OAAzB;AAEA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAAZ,IAAyC,YAAjE;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB;;AAIA,SAASC,SAAT,GAAqB;AACnB,QAAMC,EAAE,GAAGC,YAAY,CAACC,OAAb,CAAqBT,eAArB,CAAX;;AACA,MAAIO,EAAJ,EAAQ;AACN,QAAI;AACF,aAAOG,IAAI,CAACC,KAAL,CAAWJ,EAAX,CAAP;AACD,KAFD,CAEE,OAAOK,EAAP,EAAW;AACXC,MAAAA,OAAO,CAACC,KAAR,CAAcF,EAAd;AACD;AACF;;AACD,SAAOR,YAAP;AACD,C,CAED;;;AACA,OAAO,SAASW,WAAT,CAAqBC,IAArB,EAA2B;AAChCR,EAAAA,YAAY,CAACS,OAAb,CAAqBjB,eAArB,EAAsCU,IAAI,CAACQ,SAAL,CAAe;AAAEb,IAAAA,YAAY,EAAEW;AAAhB,GAAf,CAAtC;AACAG,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;AAED,MAAMC,WAAW,gBAAGzB,aAAa,EAAjC;AAEA,OAAO,SAAS0B,OAAT,GAAmB;AAAA;;AACxB,SAAOxB,UAAU,CAACuB,WAAD,CAAV,CAAwBjB,YAA/B;AACD;;GAFekB,O;;AAIhB,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAClC,QAAMC,QAAN,SAAuB9B,KAAK,CAAC6B,SAA7B,CAAuC;AAKrCE,IAAAA,MAAM,GAAG;AACP,0BAAO,QAAC,SAAD,OAAe,KAAKC,KAApB;AAA2B,QAAA,IAAI,EAAE,KAAKC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAPoC;;AAAjCH,EAAAA,QAD4B,CAEzBI,WAFyB,GAEV,YAAWL,SAAS,CAACK,WAAV,IAAyBL,SAAS,CAACM,IAAK,GAFzC;AAC5BL,EAAAA,QAD4B,CAIzBM,WAJyB,GAIXV,WAJW;AAWlC,SAAOI,QAAP;AACD;AAED,OAAO,MAAMO,YAAY,GAAGX,WAAW,CAACY,QAAjC;AAEP,OAAO,SAASC,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA4C;AAAA;;AACjD,QAAMpB,IAAI,GAAGlB,OAAO,CAACQ,SAAD,EAAY,EAAZ,CAApB;AAEA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEU,IAA7B;AAAA,cAAoCoB;AAApC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;IAJeD,oB;;KAAAA,oB","sourcesContent":["import React, {createContext} from \"react\";\r\nimport {useMemo} from \"react\";\r\nimport {useContext} from \"react\";\r\n\r\nconst I18N_CONFIG_KEY = process.env.REACT_APP_I18N_CONFIG_KEY || \"i18nConfig\";\r\nconst initialState = {\r\n    selectedLang: \"en\"\r\n  };\r\n\r\nfunction getConfig() {\r\n  const ls = localStorage.getItem(I18N_CONFIG_KEY);\r\n  if (ls) {\r\n    try {\r\n      return JSON.parse(ls);\r\n    } catch (er) {\r\n      console.error(er);\r\n    }\r\n  }\r\n  return initialState;\r\n}\r\n\r\n// Side effect\r\nexport function setLanguage(lang) {\r\n  localStorage.setItem(I18N_CONFIG_KEY, JSON.stringify({ selectedLang: lang }));\r\n  window.location.reload();\r\n}\r\n\r\nconst I18nContext = createContext();\r\n\r\nexport function useLang() {\r\n  return useContext(I18nContext).selectedLang;\r\n}\r\n\r\nexport function withI18n(Component) {\r\n  class WithI18n extends React.Component {\r\n    static displayName = `WithI18n(${Component.displayName || Component.name})`;\r\n\r\n    static contextType = I18nContext;\r\n\r\n    render() {\r\n      return <Component {...this.props} menu={this.context} />;\r\n    }\r\n  }\r\n\r\n  return WithI18n;\r\n}\r\n\r\nexport const I18nConsumer = I18nContext.Consumer;\r\n\r\nexport function MetronicI18nProvider({ children }) {\r\n  const lang = useMemo(getConfig, []);\r\n\r\n  return <I18nContext.Provider value={lang}>{children}</I18nContext.Provider>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}