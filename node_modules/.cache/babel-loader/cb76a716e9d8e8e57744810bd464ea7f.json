{"ast":null,"code":"// eslint-disable-next-line\nimport remarkTableMock from \"./remarkTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockRemarks(mock) {\n  mock.onPost(\"api/remarks\").reply(({\n    data\n  }) => {\n    const {\n      remark\n    } = JSON.parse(data);\n    const {\n      carId,\n      text = \"\",\n      dueDate = \"01/01/2019\",\n      type = 0\n    } = remark;\n    const id = generateRemarkId();\n    const newRemark = {\n      id,\n      carId: +carId,\n      text,\n      dueDate,\n      type\n    };\n    remarkTableMock.push();\n    return [200, {\n      remark: newRemark\n    }];\n  });\n  mock.onPost(/api\\/remarksfind\\/\\d+/).reply(config => {\n    // const urls = config.url.split(\"/\");\n    const urls = config.url;\n    const id = urls;\n    const mockUtils = new MockUtils();\n    const {\n      queryParams\n    } = JSON.parse(config.data); // const productRemarks = remarkTableMock.filter(el => el.carId === +id);\n\n    const productRemarks = remarkTableMock.filter(el => el.carId);\n    const filterdRemarks = mockUtils.baseFilter(productRemarks, queryParams);\n    return [200, filterdRemarks];\n  });\n  mock.onPost(\"api/remarks/deleteRemarks\").reply(config => {\n    const {\n      ids\n    } = JSON.parse(config.data);\n    ids.forEach(id => {\n      const index = remarkTableMock.findIndex(el => el.id === id);\n\n      if (index > -1) {\n        remarkTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/remarks\\/\\d+/).reply(config => {\n    // const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n    const id = config.url; // const remark = remarkTableMock.find(el => el.id === +id);\n\n    const remark = remarkTableMock.find(el => el.id);\n\n    if (!remark) {\n      return [400];\n    }\n\n    return [200, remark];\n  });\n  mock.onPut(/api\\/remarks\\/\\d+/).reply(config => {\n    // const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n    const id = config.url;\n    const {\n      remark\n    } = JSON.parse(config.data); // const index = remarkTableMock.findIndex(el => el.id === +id);\n\n    const index = remarkTableMock.findIndex(el => el.id);\n\n    if (!index) {\n      return [400];\n    }\n\n    remarkTableMock[index] = { ...remark\n    };\n    return [200];\n  });\n  mock.onDelete(/api\\/remarks\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\n    const index = remarkTableMock.findIndex(el => el.id === +id);\n    remarkTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateRemarkId() {\n  const ids = remarkTableMock.map(el => el.id);\n  const maxId = Math.max(...ids);\n  return maxId + 1;\n}","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/__mocks__/mockRemark.tsx"],"names":["remarkTableMock","MockUtils","mockRemarks","mock","onPost","reply","data","remark","JSON","parse","carId","text","dueDate","type","id","generateRemarkId","newRemark","push","config","urls","url","mockUtils","queryParams","productRemarks","filter","el","filterdRemarks","baseFilter","ids","forEach","index","findIndex","splice","onGet","find","onPut","onDelete","match","map","maxId","Math","max"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\r\nimport remarkTableMock from \"./remarkTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\nimport MockAdapter from \"axios-mock-adapter/types\";\r\nimport { productsSlice } from '../_redux/products/productsSlice';\r\n\r\nexport default function mockRemarks(mock: MockAdapter) {\r\n  mock.onPost(\"api/remarks\").reply(({ data }) => {\r\n    const { remark } = JSON.parse(data);\r\n    const { carId, text = \"\", dueDate = \"01/01/2019\", type = 0 } = remark;\r\n    const id = generateRemarkId();\r\n    const newRemark = {\r\n      id,\r\n      carId: +carId,\r\n      text,\r\n      dueDate,\r\n      type\r\n    };\r\n    remarkTableMock.push();\r\n    return [200, { remark: newRemark }];\r\n  });\r\n\r\n  mock.onPost(/api\\/remarksfind\\/\\d+/).reply(config => {\r\n    // const urls = config.url.split(\"/\");\r\n    const urls = config.url;\r\n    const id = urls;\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    // const productRemarks = remarkTableMock.filter(el => el.carId === +id);\r\n    const productRemarks = remarkTableMock.filter(el=>el.carId);\r\n    const filterdRemarks = mockUtils.baseFilter(productRemarks, queryParams);\r\n    return [200, filterdRemarks];\r\n  });\r\n\r\n  mock.onPost(\"api/remarks/deleteRemarks\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach((id: number) => {\r\n      const index = remarkTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        remarkTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/remarks\\/\\d+/).reply(config => {\r\n    // const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\r\n    const id = config.url;\r\n    // const remark = remarkTableMock.find(el => el.id === +id);\r\n    const remark = remarkTableMock.find(el  =>  el.id);\r\n    if (!remark) {\r\n      return [400];\r\n    }\r\n\r\n    return [200, remark];\r\n  });\r\n\r\n  mock.onPut(/api\\/remarks\\/\\d+/).reply(config => {\r\n    // const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\r\n    const id = config.url;\r\n    const { remark } = JSON.parse(config.data);\r\n    // const index = remarkTableMock.findIndex(el => el.id === +id);\r\n    const index = remarkTableMock.findIndex(el => el.id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    remarkTableMock[index] = { ...remark };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/remarks\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/remarks\\/(\\d+)/)[1];\r\n    const index = remarkTableMock.findIndex(el => el.id === +id);\r\n    remarkTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateRemarkId() {\r\n  const ids = remarkTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}