{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialRemarksState = {\n  listLoading: false,\n  actionsLoading: false,\n  totalCount: 0,\n  entities: null,\n  remarkForEdit: undefined,\n  lastError: null\n};\nexport const callTypes = {\n  list: \"list\",\n  action: \"action\"\n};\nexport const remarksSlice = createSlice({\n  name: \"remarks\",\n  initialState: initialRemarksState,\n  reducers: {\n    catchError: (state, action) => {\n      // state.error = `${action.type}: ${action.payload.error}`;\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = false;\n      } else {\n        state.actionsLoading = false;\n      }\n    },\n    startCall: (state, action) => {\n      // state.error = null;\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = true;\n      } else {\n        state.actionsLoading = true;\n      }\n    },\n    // getRemarkById\n    remarkFetched: (state, action) => {\n      state.actionsLoading = false;\n      state.remarkForEdit = action.payload.remarkForEdit; // state.error = null;\n    },\n    // findRemarks\n    remarksFetched: (state, action) => {\n      const {\n        totalCount,\n        entities\n      } = action.payload;\n      state.listLoading = false; // state.error = null;\n\n      state.entities = entities;\n      state.totalCount = totalCount;\n    },\n    // createRemark\n    remarkCreated: (state, action) => {\n      state.actionsLoading = false; // state.error = null;\n\n      state.entities.push(action.payload.remark);\n    },\n    // updateRemark\n    remarkUpdated: (state, action) => {\n      // state.error = null;\n      state.actionsLoading = false; // state.entities = state.entities.map((entity: { id: any; }) => {\n      //   if (entity.id === action.payload.remark.id) {\n      //     return action.payload.remark;\n      //   }\n      //   return entity;\n      // });\n    },\n    // deleteRemark\n    remarkDeleted: (state, action) => {\n      // state.error = null;\n      state.actionsLoading = false; // state.entities = state.entities.filter((el: { id: any; }) => el.id !== action.payload.id);\n    },\n    // deleteRemarks\n    remarksDeleted: (state, action) => {\n      // state.error = null;\n      state.actionsLoading = false; // state.entities = state.entities.filter(\n      //   (        el: { id: any; }) => !action.payload.ids.includes(el.id)\n      // );\n    },\n    // remarksUpdateState\n    remarksStatusUpdated: (state, action) => {\n      state.actionsLoading = false; // state.error = null;\n\n      const {\n        ids,\n        status\n      } = action.payload; // state.entities = state.entities.map((entity: { id: any; status: any; }) => {\n      //   if (ids.findIndex((id: any) => id === entity.id) > -1) {\n      //     entity.status = status;\n      //   }\n      //   return entity;\n      // });\n    }\n  }\n});","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/_redux/remarks/remarksSlice.tsx"],"names":["createSlice","initialRemarksState","listLoading","actionsLoading","totalCount","entities","remarkForEdit","undefined","lastError","callTypes","list","action","remarksSlice","name","initialState","reducers","catchError","state","payload","callType","startCall","remarkFetched","remarksFetched","remarkCreated","push","remark","remarkUpdated","remarkDeleted","remarksDeleted","remarksStatusUpdated","ids","status"],"mappings":"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","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialRemarksState = {\r\n  listLoading: false,\r\n  actionsLoading: false,\r\n  totalCount: 0,\r\n  entities: null,\r\n  remarkForEdit: undefined,\r\n  lastError: null\r\n};\r\nexport const callTypes = {\r\n  list: \"list\",\r\n  action: \"action\"\r\n};\r\n\r\nexport const remarksSlice = createSlice({\r\n  name: \"remarks\",\r\n  initialState: initialRemarksState,\r\n  reducers: {\r\n    catchError: (state, action) => {\r\n      // state.error = `${action.type}: ${action.payload.error}`;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = false;\r\n      } else {\r\n        state.actionsLoading = false;\r\n      }\r\n    },\r\n    startCall: (state, action) => {\r\n      // state.error = null;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = true;\r\n      } else {\r\n        state.actionsLoading = true;\r\n      }\r\n    },\r\n    // getRemarkById\r\n    remarkFetched: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.remarkForEdit = action.payload.remarkForEdit;\r\n      // state.error = null;\r\n    },\r\n    // findRemarks\r\n    remarksFetched: (state, action) => {\r\n      const { totalCount, entities } = action.payload;\r\n      state.listLoading = false;\r\n      // state.error = null;\r\n      state.entities = entities;\r\n      state.totalCount = totalCount;\r\n    },\r\n    // createRemark\r\n    remarkCreated: (state, action) => {\r\n      state.actionsLoading = false;\r\n      // state.error = null;\r\n      state.entities.push(action.payload.remark);\r\n    },\r\n    // updateRemark\r\n    remarkUpdated: (state, action) => {\r\n      // state.error = null;\r\n      state.actionsLoading = false;\r\n      // state.entities = state.entities.map((entity: { id: any; }) => {\r\n      //   if (entity.id === action.payload.remark.id) {\r\n      //     return action.payload.remark;\r\n      //   }\r\n      //   return entity;\r\n      // });\r\n    },\r\n    // deleteRemark\r\n    remarkDeleted: (state, action) => {\r\n      // state.error = null;\r\n      state.actionsLoading = false;\r\n      // state.entities = state.entities.filter((el: { id: any; }) => el.id !== action.payload.id);\r\n    },\r\n    // deleteRemarks\r\n    remarksDeleted: (state, action) => {\r\n      // state.error = null;\r\n      state.actionsLoading = false;\r\n      // state.entities = state.entities.filter(\r\n      //   (        el: { id: any; }) => !action.payload.ids.includes(el.id)\r\n      // );\r\n    },\r\n    // remarksUpdateState\r\n    remarksStatusUpdated: (state, action) => {\r\n      state.actionsLoading = false;\r\n      // state.error = null;\r\n      const { ids, status } = action.payload;\r\n      // state.entities = state.entities.map((entity: { id: any; status: any; }) => {\r\n      //   if (ids.findIndex((id: any) => id === entity.id) > -1) {\r\n      //     entity.status = status;\r\n      //   }\r\n      //   return entity;\r\n      // });\r\n    }\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}