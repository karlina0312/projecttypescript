{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialSpecificationsState = {\n  listLoading: false,\n  actionsLoading: false,\n  totalCount: 0,\n  entities: null,\n  specificationForEdit: undefined,\n  lastError: null\n};\nexport const callTypes = {\n  list: \"list\",\n  action: \"action\"\n};\nexport const specificationsSlice = createSlice({\n  name: \"specifications\",\n  initialState: initialSpecificationsState,\n  reducers: {\n    catchError: (state, action) => {\n      // state.error = `${action.type}: ${action.payload.error}`;\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = false;\n      } else {\n        state.actionsLoading = false;\n      }\n    },\n    startCall: (state, action) => {\n      // state.error = null;\n      if (action.payload.callType === callTypes.list) {\n        state.listLoading = true;\n      } else {\n        state.actionsLoading = true;\n      }\n    },\n    // getSpecificationById\n    specificationFetched: (state, action) => {\n      state.actionsLoading = false;\n      state.specificationForEdit = action.payload.specificationForEdit; // state.error = null;\n    },\n    // findSpecifications\n    specificationsFetched: (state, action) => {\n      const {\n        totalCount,\n        entities\n      } = action.payload;\n      state.listLoading = false; // state.error = null;\n\n      state.entities = entities;\n      state.totalCount = totalCount;\n    },\n    // createSpecification\n    specificationCreated: (state, action) => {\n      state.actionsLoading = false; // state.error = null;\n      // state.entities.push(action.payload.specification);\n    },\n    // updateSpecification\n    specificationUpdated: (state, action) => {\n      // state.error = null;\n      state.actionsLoading = false; // state.entities = state.entities.map((entity: { id: any; }) => {\n      //   if (entity.id === action.payload.specification.id) {\n      //     return action.payload.specification;\n      //   }\n      //   return entity;\n      // });\n    },\n    // deleteSpecification\n    specificationDeleted: (state, action) => {\n      // state.error = null;\n      state.actionsLoading = false; // state.entities = state.entities.filter((el: { id: any; }) => el.id !== action.payload.id);\n    },\n    // deleteSpecifications\n    specificationsDeleted: (state, action) => {\n      // state.error = null;\n      state.actionsLoading = false; // state.entities = state.entities.filter(\n      //   (        el: { id: any; }) => !action.payload.ids.includes(el.id)\n      // );\n    }\n  }\n});","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/_redux/specifications/specificationsSlice.tsx"],"names":["createSlice","initialSpecificationsState","listLoading","actionsLoading","totalCount","entities","specificationForEdit","undefined","lastError","callTypes","list","action","specificationsSlice","name","initialState","reducers","catchError","state","payload","callType","startCall","specificationFetched","specificationsFetched","specificationCreated","specificationUpdated","specificationDeleted","specificationsDeleted"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,0BAA0B,GAAG;AACjCC,EAAAA,WAAW,EAAE,KADoB;AAEjCC,EAAAA,cAAc,EAAE,KAFiB;AAGjCC,EAAAA,UAAU,EAAE,CAHqB;AAIjCC,EAAAA,QAAQ,EAAE,IAJuB;AAKjCC,EAAAA,oBAAoB,EAAEC,SALW;AAMjCC,EAAAA,SAAS,EAAE;AANsB,CAAnC;AAQA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,IAAI,EAAE,MADiB;AAEvBC,EAAAA,MAAM,EAAE;AAFe,CAAlB;AAKP,OAAO,MAAMC,mBAAmB,GAAGZ,WAAW,CAAC;AAC7Ca,EAAAA,IAAI,EAAE,gBADuC;AAE7CC,EAAAA,YAAY,EAAEb,0BAF+B;AAG7Cc,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQN,MAAR,KAAmB;AAC7B;AACA,UAAIA,MAAM,CAACO,OAAP,CAAeC,QAAf,KAA4BV,SAAS,CAACC,IAA1C,EAAgD;AAC9CO,QAAAA,KAAK,CAACf,WAAN,GAAoB,KAApB;AACD,OAFD,MAEO;AACLe,QAAAA,KAAK,CAACd,cAAN,GAAuB,KAAvB;AACD;AACF,KARO;AASRiB,IAAAA,SAAS,EAAE,CAACH,KAAD,EAAQN,MAAR,KAAmB;AAC5B;AACA,UAAIA,MAAM,CAACO,OAAP,CAAeC,QAAf,KAA4BV,SAAS,CAACC,IAA1C,EAAgD;AAC9CO,QAAAA,KAAK,CAACf,WAAN,GAAoB,IAApB;AACD,OAFD,MAEO;AACLe,QAAAA,KAAK,CAACd,cAAN,GAAuB,IAAvB;AACD;AACF,KAhBO;AAiBR;AACAkB,IAAAA,oBAAoB,EAAE,CAACJ,KAAD,EAAQN,MAAR,KAAmB;AACvCM,MAAAA,KAAK,CAACd,cAAN,GAAuB,KAAvB;AACAc,MAAAA,KAAK,CAACX,oBAAN,GAA6BK,MAAM,CAACO,OAAP,CAAeZ,oBAA5C,CAFuC,CAGvC;AACD,KAtBO;AAuBR;AACAgB,IAAAA,qBAAqB,EAAE,CAACL,KAAD,EAAQN,MAAR,KAAmB;AACxC,YAAM;AAAEP,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA2BM,MAAM,CAACO,OAAxC;AACAD,MAAAA,KAAK,CAACf,WAAN,GAAoB,KAApB,CAFwC,CAGxC;;AACAe,MAAAA,KAAK,CAACZ,QAAN,GAAiBA,QAAjB;AACAY,MAAAA,KAAK,CAACb,UAAN,GAAmBA,UAAnB;AACD,KA9BO;AA+BR;AACAmB,IAAAA,oBAAoB,EAAE,CAACN,KAAD,EAAQN,MAAR,KAAmB;AACvCM,MAAAA,KAAK,CAACd,cAAN,GAAuB,KAAvB,CADuC,CAEvC;AACA;AACD,KApCO;AAqCR;AACAqB,IAAAA,oBAAoB,EAAE,CAACP,KAAD,EAAQN,MAAR,KAAmB;AACvC;AACAM,MAAAA,KAAK,CAACd,cAAN,GAAuB,KAAvB,CAFuC,CAGvC;AACA;AACA;AACA;AACA;AACA;AACD,KA/CO;AAgDR;AACAsB,IAAAA,oBAAoB,EAAE,CAACR,KAAD,EAAQN,MAAR,KAAmB;AACvC;AACAM,MAAAA,KAAK,CAACd,cAAN,GAAuB,KAAvB,CAFuC,CAGvC;AACD,KArDO;AAsDR;AACAuB,IAAAA,qBAAqB,EAAE,CAACT,KAAD,EAAQN,MAAR,KAAmB;AACxC;AACAM,MAAAA,KAAK,CAACd,cAAN,GAAuB,KAAvB,CAFwC,CAGxC;AACA;AACA;AACD;AA7DO;AAHmC,CAAD,CAAvC","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialSpecificationsState = {\r\n  listLoading: false,\r\n  actionsLoading: false,\r\n  totalCount: 0,\r\n  entities: null,\r\n  specificationForEdit: undefined,\r\n  lastError: null\r\n};\r\nexport const callTypes = {\r\n  list: \"list\",\r\n  action: \"action\"\r\n};\r\n\r\nexport const specificationsSlice = createSlice({\r\n  name: \"specifications\",\r\n  initialState: initialSpecificationsState,\r\n  reducers: {\r\n    catchError: (state, action) => {\r\n      // state.error = `${action.type}: ${action.payload.error}`;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = false;\r\n      } else {\r\n        state.actionsLoading = false;\r\n      }\r\n    },\r\n    startCall: (state, action) => {\r\n      // state.error = null;\r\n      if (action.payload.callType === callTypes.list) {\r\n        state.listLoading = true;\r\n      } else {\r\n        state.actionsLoading = true;\r\n      }\r\n    },\r\n    // getSpecificationById\r\n    specificationFetched: (state, action) => {\r\n      state.actionsLoading = false;\r\n      state.specificationForEdit = action.payload.specificationForEdit;\r\n      // state.error = null;\r\n    },\r\n    // findSpecifications\r\n    specificationsFetched: (state, action) => {\r\n      const { totalCount, entities } = action.payload;\r\n      state.listLoading = false;\r\n      // state.error = null;\r\n      state.entities = entities;\r\n      state.totalCount = totalCount;\r\n    },\r\n    // createSpecification\r\n    specificationCreated: (state, action) => {\r\n      state.actionsLoading = false;\r\n      // state.error = null;\r\n      // state.entities.push(action.payload.specification);\r\n    },\r\n    // updateSpecification\r\n    specificationUpdated: (state, action) => {\r\n      // state.error = null;\r\n      state.actionsLoading = false;\r\n      // state.entities = state.entities.map((entity: { id: any; }) => {\r\n      //   if (entity.id === action.payload.specification.id) {\r\n      //     return action.payload.specification;\r\n      //   }\r\n      //   return entity;\r\n      // });\r\n    },\r\n    // deleteSpecification\r\n    specificationDeleted: (state, action) => {\r\n      // state.error = null;\r\n      state.actionsLoading = false;\r\n      // state.entities = state.entities.filter((el: { id: any; }) => el.id !== action.payload.id);\r\n    },\r\n    // deleteSpecifications\r\n    specificationsDeleted: (state, action) => {\r\n      // state.error = null;\r\n      state.actionsLoading = false;\r\n      // state.entities = state.entities.filter(\r\n      //   (        el: { id: any; }) => !action.payload.ids.includes(el.id)\r\n      // );\r\n    }\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}