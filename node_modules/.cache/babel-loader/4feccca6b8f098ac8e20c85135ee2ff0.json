{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/khatnaa/Desktop/project/src/_metronic/layout/_core/MetronicSubheader.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useContext } from \"react\";\nexport function getBreadcrumbsAndTitle(menuId, pathName) {\n  const result = {\n    breadcrumbs: [],\n    title: \"\"\n  };\n  const menu = document.getElementById(menuId);\n\n  if (!menu) {\n    return result;\n  }\n\n  const activeLinksArray = Array.from(menu.getElementsByClassName(\"active\") || []);\n  const activeLinks = activeLinksArray.filter(el => el.tagName === \"A\");\n\n  if (!activeLinks) {\n    return result;\n  }\n\n  activeLinks.forEach(link => {\n    const titleSpans = link.getElementsByClassName(\"menu-text\");\n\n    if (titleSpans) {\n      const titleSpan = Array.from(titleSpans).find(t => t.innerHTML && t.innerHTML.trim().length > 0);\n\n      if (titleSpan) {\n        result.breadcrumbs.push({\n          pathname: link.pathname.replace(process.env.PUBLIC_URL, \"\"),\n          title: titleSpan.innerHTML\n        });\n      }\n    }\n  });\n  result.title = getTitle(result.breadcrumbs, pathName);\n  return result;\n}\nexport function getTitle(breadCrumbs, pathname) {\n  if (!breadCrumbs || !pathname) {\n    return \"\";\n  }\n\n  const length = breadCrumbs.length;\n\n  if (!length) {\n    return \"\";\n  }\n\n  return breadCrumbs[length - 1].title;\n}\nconst SubheaderContext = /*#__PURE__*/createContext();\nexport function useSubheader() {\n  _s();\n\n  return useContext(SubheaderContext);\n}\n\n_s(useSubheader, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const SubheaderConsumer = SubheaderContext.Consumer;\nexport function MetronicSubheaderProvider({\n  children\n}) {\n  _s2();\n\n  const [title, setTitle] = useState(\"\");\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const value = {\n    title,\n    setTitle,\n    breadcrumbs,\n    setBreadcrumbs\n  };\n  return /*#__PURE__*/_jsxDEV(SubheaderContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(MetronicSubheaderProvider, \"f5i4S+uvMCIz8h0hpZQz/KGZ58A=\");\n\n_c = MetronicSubheaderProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MetronicSubheaderProvider\");","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/_metronic/layout/_core/MetronicSubheader.js"],"names":["React","createContext","useState","useContext","getBreadcrumbsAndTitle","menuId","pathName","result","breadcrumbs","title","menu","document","getElementById","activeLinksArray","Array","from","getElementsByClassName","activeLinks","filter","el","tagName","forEach","link","titleSpans","titleSpan","find","t","innerHTML","trim","length","push","pathname","replace","process","env","PUBLIC_URL","getTitle","breadCrumbs","SubheaderContext","useSubheader","SubheaderConsumer","Consumer","MetronicSubheaderProvider","children","setTitle","setBreadcrumbs","value"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\r\n\r\nexport function getBreadcrumbsAndTitle(menuId, pathName) {\r\n  const result = {\r\n    breadcrumbs: [],\r\n    title: \"\",\r\n  };\r\n\r\n  const menu = document.getElementById(menuId);\r\n  if (!menu) {\r\n    return result;\r\n  }\r\n\r\n  const activeLinksArray = Array.from(\r\n    menu.getElementsByClassName(\"active\") || []\r\n  );\r\n  const activeLinks = activeLinksArray.filter((el) => el.tagName === \"A\");\r\n  if (!activeLinks) {\r\n    return result;\r\n  }\r\n\r\n  activeLinks.forEach((link) => {\r\n    const titleSpans = link.getElementsByClassName(\"menu-text\");\r\n    if (titleSpans) {\r\n      const titleSpan = Array.from(titleSpans).find(\r\n        (t) => t.innerHTML && t.innerHTML.trim().length > 0\r\n      );\r\n      if (titleSpan) {\r\n        result.breadcrumbs.push({\r\n          pathname: link.pathname.replace(process.env.PUBLIC_URL, \"\"),\r\n          title: titleSpan.innerHTML,\r\n        });\r\n      }\r\n    }\r\n  });\r\n  result.title = getTitle(result.breadcrumbs, pathName);\r\n  return result;\r\n}\r\n\r\nexport function getTitle(breadCrumbs, pathname) {\r\n  if (!breadCrumbs || !pathname) {\r\n    return \"\";\r\n  }\r\n\r\n  const length = breadCrumbs.length;\r\n  if (!length) {\r\n    return \"\";\r\n  }\r\n\r\n  return breadCrumbs[length - 1].title;\r\n}\r\n\r\nconst SubheaderContext = createContext();\r\n\r\nexport function useSubheader() {\r\n  return useContext(SubheaderContext);\r\n}\r\n\r\nexport const SubheaderConsumer = SubheaderContext.Consumer;\r\n\r\nexport function MetronicSubheaderProvider({ children }) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\r\n  const value = { title, setTitle, breadcrumbs, setBreadcrumbs };\r\n  return (\r\n    <SubheaderContext.Provider value={value}>\r\n      {children}\r\n    </SubheaderContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}