{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/khatnaa/Desktop/project/src/_metronic/_partials/controls/forms/Input.js\";\nimport React from \"react\";\nimport { FieldFeedbackLabel } from \"./FieldFeedbackLabel\";\n\nconst getFieldCSSClasses = (touched, errors) => {\n  const classes = [\"form-control\"];\n\n  if (touched && errors) {\n    classes.push(\"is-invalid\");\n  }\n\n  if (touched && !errors) {\n    classes.push(\"is-valid\");\n  }\n\n  return classes.join(\" \");\n};\n\nexport function Input({\n  field,\n  // { name, value, onChange, onBlur }\n  form: {\n    touched,\n    errors\n  },\n  // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  label,\n  withFeedbackLabel = true,\n  customFeedbackLabel,\n  type = \"text\",\n  ...props\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Enter \", label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      className: getFieldCSSClasses(touched[field.name], errors[field.name]),\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), withFeedbackLabel && /*#__PURE__*/_jsxDEV(FieldFeedbackLabel, {\n      error: errors[field.name],\n      touched: touched[field.name],\n      label: label,\n      type: type,\n      customFeedbackLabel: customFeedbackLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/_metronic/_partials/controls/forms/Input.js"],"names":["React","FieldFeedbackLabel","getFieldCSSClasses","touched","errors","classes","push","join","Input","field","form","label","withFeedbackLabel","customFeedbackLabel","type","props","name"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,kBAAR,QAAiC,sBAAjC;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC9C,QAAMC,OAAO,GAAG,CAAC,cAAD,CAAhB;;AACA,MAAIF,OAAO,IAAIC,MAAf,EAAuB;AACrBC,IAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACD;;AAED,MAAIH,OAAO,IAAI,CAACC,MAAhB,EAAwB;AACtBC,IAAAA,OAAO,CAACC,IAAR,CAAa,UAAb;AACD;;AAED,SAAOD,OAAO,CAACE,IAAR,CAAa,GAAb,CAAP;AACD,CAXD;;AAaA,OAAO,SAASC,KAAT,CAAe;AACpBC,EAAAA,KADoB;AACb;AACPC,EAAAA,IAAI,EAAE;AAAEP,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAFc;AAEO;AAC3BO,EAAAA,KAHoB;AAIpBC,EAAAA,iBAAiB,GAAG,IAJA;AAKpBC,EAAAA,mBALoB;AAMpBC,EAAAA,IAAI,GAAG,MANa;AAOpB,KAAGC;AAPiB,CAAf,EAQJ;AACD,sBACE;AAAA,eACGJ,KAAK,iBAAI;AAAA,2BAAcA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YADZ,eAEE;AACE,MAAA,IAAI,EAAEG,IADR;AAEE,MAAA,SAAS,EAAEZ,kBAAkB,CAACC,OAAO,CAACM,KAAK,CAACO,IAAP,CAAR,EAAsBZ,MAAM,CAACK,KAAK,CAACO,IAAP,CAA5B,CAF/B;AAAA,SAGMP,KAHN;AAAA,SAIMM;AAJN;AAAA;AAAA;AAAA;AAAA,YAFF,EAQGH,iBAAiB,iBAChB,QAAC,kBAAD;AACE,MAAA,KAAK,EAAER,MAAM,CAACK,KAAK,CAACO,IAAP,CADf;AAEE,MAAA,OAAO,EAAEb,OAAO,CAACM,KAAK,CAACO,IAAP,CAFlB;AAGE,MAAA,KAAK,EAAEL,KAHT;AAIE,MAAA,IAAI,EAAEG,IAJR;AAKE,MAAA,mBAAmB,EAAED;AALvB;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADF;AAoBD;KA7BeL,K","sourcesContent":["import React from \"react\";\r\nimport {FieldFeedbackLabel} from \"./FieldFeedbackLabel\";\r\n\r\nconst getFieldCSSClasses = (touched, errors) => {\r\n  const classes = [\"form-control\"];\r\n  if (touched && errors) {\r\n    classes.push(\"is-invalid\");\r\n  }\r\n\r\n  if (touched && !errors) {\r\n    classes.push(\"is-valid\");\r\n  }\r\n\r\n  return classes.join(\" \");\r\n};\r\n\r\nexport function Input({\r\n  field, // { name, value, onChange, onBlur }\r\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\r\n  label,\r\n  withFeedbackLabel = true,\r\n  customFeedbackLabel,\r\n  type = \"text\",\r\n  ...props\r\n}) {\r\n  return (\r\n    <>\r\n      {label && <label>Enter {label}</label>}\r\n      <input\r\n        type={type}\r\n        className={getFieldCSSClasses(touched[field.name], errors[field.name])}\r\n        {...field}\r\n        {...props}\r\n      />\r\n      {withFeedbackLabel && (\r\n        <FieldFeedbackLabel\r\n          error={errors[field.name]}\r\n          touched={touched[field.name]}\r\n          label={label}\r\n          type={type}\r\n          customFeedbackLabel={customFeedbackLabel}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}