{"ast":null,"code":"// eslint-disable-next-line\nimport carTableMock from \"./carTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockProducts(mock) {\n  mock.onPost(\"api/products\").reply(({\n    data\n  }) => {\n    const {\n      product\n    } = JSON.parse(data);\n    const {\n      model = \"\",\n      manufacture = \"\",\n      modelYear = 2000,\n      mileage = 0,\n      description = \"\",\n      color = \"Black\",\n      price = 1000,\n      condition = 0,\n      status = 0,\n      VINCode = \"\"\n    } = product;\n    const id = generateProductId();\n    const newProduct = {\n      id,\n      model,\n      manufacture,\n      modelYear,\n      mileage,\n      description,\n      color,\n      price,\n      condition,\n      status,\n      VINCode\n    };\n    carTableMock.push(newProduct);\n    return [200, {\n      product: newProduct\n    }];\n  });\n  mock.onPost(\"api/products/find\").reply(config => {\n    const mockUtils = new MockUtils();\n    const {\n      queryParams\n    } = JSON.parse(config.data);\n    const filteredProducts = mockUtils.baseFilter(carTableMock, queryParams);\n    return [200, filteredProducts];\n  });\n  mock.onPost(\"api/products/deleteProducts\").reply(config => {\n    const {\n      ids\n    } = JSON.parse(config.data);\n    ids.forEach(id => {\n      const index = carTableMock.findIndex(el => el.id === id);\n\n      if (index > -1) {\n        carTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onPost(\"api/products/updateStatusForProducts\").reply(config => {\n    const {\n      ids,\n      status\n    } = JSON.parse(config.data);\n    carTableMock.forEach(el => {\n      if (ids.findIndex(id => id === el.id) > -1) {\n        el.status = status;\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/products\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n    const product = carTableMock.find(el => el.id === +id);\n\n    if (!product) {\n      return [400];\n    }\n\n    return [200, product];\n  });\n  mock.onPut(/api\\/products\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n    const {\n      product\n    } = JSON.parse(config.data);\n    const index = carTableMock.findIndex(el => el.id === +id);\n\n    if (!index) {\n      return [400];\n    }\n\n    carTableMock[index] = { ...product\n    };\n    return [200];\n  });\n  mock.onDelete(/api\\/products\\/\\d+/).reply(config => {\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\n    const index = carTableMock.findIndex(el => el.id === +id);\n    carTableMock.splice(index, 1);\n\n    if (!index === -1) {\n      return [400];\n    }\n\n    return [200];\n  });\n}\n\nfunction generateProductId() {\n  const ids = carTableMock.map(el => el.id);\n  const maxId = Math.max(...ids);\n  return maxId + 1;\n}","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/__mocks__/mockProduct.tsx"],"names":["carTableMock","MockUtils","mockProducts","mock","onPost","reply","data","product","JSON","parse","model","manufacture","modelYear","mileage","description","color","price","condition","status","VINCode","id","generateProductId","newProduct","push","config","mockUtils","queryParams","filteredProducts","baseFilter","ids","forEach","index","findIndex","el","splice","onGet","url","match","find","onPut","onDelete","map","maxId","Math","max"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\r\nimport carTableMock from \"./carTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\n\r\nexport default function mockProducts(mock) {\r\n  mock.onPost(\"api/products\").reply(({ data }) => {\r\n    const { product } = JSON.parse(data);\r\n    const {\r\n      model = \"\",\r\n      manufacture = \"\",\r\n      modelYear = 2000,\r\n      mileage = 0,\r\n      description = \"\",\r\n      color = \"Black\",\r\n      price = 1000,\r\n      condition = 0,\r\n      status = 0,\r\n      VINCode = \"\"\r\n    } = product;\r\n\r\n    const id = generateProductId();\r\n    const newProduct = {\r\n      id,\r\n      model,\r\n      manufacture,\r\n      modelYear,\r\n      mileage,\r\n      description,\r\n      color,\r\n      price,\r\n      condition,\r\n      status,\r\n      VINCode\r\n    };\r\n    carTableMock.push(newProduct);\r\n    return [200, { product: newProduct }];\r\n  });\r\n\r\n  mock.onPost(\"api/products/find\").reply(config => {\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const filteredProducts = mockUtils.baseFilter(carTableMock, queryParams);\r\n    return [200, filteredProducts];\r\n  });\r\n\r\n  mock.onPost(\"api/products/deleteProducts\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach(id => {\r\n      const index = carTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        carTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onPost(\"api/products/updateStatusForProducts\").reply(config => {\r\n    const { ids, status } = JSON.parse(config.data);\r\n    carTableMock.forEach(el => {\r\n      if (ids.findIndex(id => id === el.id) > -1) {\r\n        el.status = status;\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const product = carTableMock.find(el => el.id === +id);\r\n    if (!product) {\r\n      return [400];\r\n    }\r\n\r\n    return [200, product];\r\n  });\r\n\r\n  mock.onPut(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const { product } = JSON.parse(config.data);\r\n    const index = carTableMock.findIndex(el => el.id === +id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    carTableMock[index] = { ...product };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/products\\/\\d+/).reply(config => {\r\n    const id = config.url.match(/api\\/products\\/(\\d+)/)[1];\r\n    const index = carTableMock.findIndex(el => el.id === +id);\r\n    carTableMock.splice(index, 1);\r\n    if (!index === -1) {\r\n      return [400];\r\n    }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateProductId() {\r\n  const ids = carTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}"]},"metadata":{},"sourceType":"module"}