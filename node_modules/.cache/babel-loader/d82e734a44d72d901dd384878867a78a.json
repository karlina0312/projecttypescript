{"ast":null,"code":"import * as requestFromServer from \"./productsCrud\";\nimport { productsSlice, callTypes } from \"./productsSlice\";\nconst {\n  actions\n} = productsSlice;\nexport const fetchProducts = queryParams => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.list\n  }));\n  return requestFromServer.findProducts(queryParams).then(response => {\n    const {\n      totalCount,\n      entities\n    } = response.data;\n    dispatch(actions.productsFetched({\n      totalCount,\n      entities\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't find products\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.list\n    }));\n  });\n};\nexport const fetchProduct = id => dispatch => {\n  if (!id) {\n    return dispatch(actions.productFetched({\n      productForEdit: undefined\n    }));\n  }\n\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.getProductById(id).then(response => {\n    const product = response.data;\n    dispatch(actions.productFetched({\n      productForEdit: product\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't find product\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const deleteProduct = id => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.deleteProduct(id).then(response => {\n    dispatch(actions.productDeleted({\n      id\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't delete product\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const createProduct = productForCreation => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.createProduct(productForCreation).then(response => {\n    const {\n      product\n    } = response.data;\n    dispatch(actions.productCreated({\n      product\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't create product\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const updateProduct = product => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.updateProduct(product).then(() => {\n    dispatch(actions.productUpdated({\n      product\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't update product\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const updateProductsStatus = (ids, status) => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.updateStatusForProducts(ids, status).then(() => {\n    dispatch(actions.productsStatusUpdated({\n      ids,\n      status\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't update products status\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};\nexport const deleteProducts = ids => dispatch => {\n  dispatch(actions.startCall({\n    callType: callTypes.action\n  }));\n  return requestFromServer.deleteProducts(ids).then(() => {\n    dispatch(actions.productsDeleted({\n      ids\n    }));\n  }).catch(error => {\n    error.clientMessage = \"Can't delete products\";\n    dispatch(actions.catchError({\n      error,\n      callType: callTypes.action\n    }));\n  });\n};","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/_redux/products/productsActions.tsx"],"names":["requestFromServer","productsSlice","callTypes","actions","fetchProducts","queryParams","dispatch","startCall","callType","list","findProducts","then","response","totalCount","entities","data","productsFetched","catch","error","clientMessage","catchError","fetchProduct","id","productFetched","productForEdit","undefined","action","getProductById","product","deleteProduct","productDeleted","createProduct","productForCreation","productCreated","updateProduct","productUpdated","updateProductsStatus","ids","status","updateStatusForProducts","productsStatusUpdated","deleteProducts","productsDeleted"],"mappings":"AAAA,OAAO,KAAKA,iBAAZ,MAAmC,gBAAnC;AACA,SAAQC,aAAR,EAAuBC,SAAvB,QAAuC,iBAAvC;AAEA,MAAM;AAACC,EAAAA;AAAD,IAAYF,aAAlB;AAEA,OAAO,MAAMG,aAAa,GAAIC,WAAD,IAAuBC,QAAD,IAA+D;AAChHA,EAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,IAAAA,QAAQ,EAAEN,SAAS,CAACO;AAAtB,GAAlB,CAAD,CAAR;AACA,SAAOT,iBAAiB,CACrBU,YADI,CACSL,WADT,EAEJM,IAFI,CAECC,QAAQ,IAAI;AAChB,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA2BF,QAAQ,CAACG,IAA1C;AACAT,IAAAA,QAAQ,CAACH,OAAO,CAACa,eAAR,CAAwB;AAAEH,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAxB,CAAD,CAAR;AACD,GALI,EAMJG,KANI,CAMEC,KAAK,IAAI;AACdA,IAAAA,KAAK,CAACC,aAAN,GAAsB,qBAAtB;AACAb,IAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,MAAAA,KAAF;AAASV,MAAAA,QAAQ,EAAEN,SAAS,CAACO;AAA7B,KAAnB,CAAD,CAAR;AACD,GATI,CAAP;AAUD,CAZM;AAcP,OAAO,MAAMY,YAAY,GAAIC,EAAD,IAAchB,QAAD,IAA+D;AACtG,MAAI,CAACgB,EAAL,EAAS;AACP,WAAOhB,QAAQ,CAACH,OAAO,CAACoB,cAAR,CAAuB;AAAEC,MAAAA,cAAc,EAAEC;AAAlB,KAAvB,CAAD,CAAf;AACD;;AAEDnB,EAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,IAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,GAAlB,CAAD,CAAR;AACA,SAAO1B,iBAAiB,CACrB2B,cADI,CACWL,EADX,EAEJX,IAFI,CAECC,QAAQ,IAAI;AAChB,UAAMgB,OAAO,GAAGhB,QAAQ,CAACG,IAAzB;AACAT,IAAAA,QAAQ,CAACH,OAAO,CAACoB,cAAR,CAAuB;AAAEC,MAAAA,cAAc,EAAEI;AAAlB,KAAvB,CAAD,CAAR;AACD,GALI,EAMJX,KANI,CAMEC,KAAK,IAAI;AACdA,IAAAA,KAAK,CAACC,aAAN,GAAsB,oBAAtB;AACAb,IAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,MAAAA,KAAF;AAASV,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,KAAnB,CAAD,CAAR;AACD,GATI,CAAP;AAUD,CAhBM;AAkBP,OAAO,MAAMG,aAAa,GAAIP,EAAD,IAAchB,QAAD,IAA+D;AACvGA,EAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,IAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,GAAlB,CAAD,CAAR;AACA,SAAO1B,iBAAiB,CACrB6B,aADI,CACUP,EADV,EAEJX,IAFI,CAECC,QAAQ,IAAI;AAChBN,IAAAA,QAAQ,CAACH,OAAO,CAAC2B,cAAR,CAAuB;AAAER,MAAAA;AAAF,KAAvB,CAAD,CAAR;AACD,GAJI,EAKJL,KALI,CAKEC,KAAK,IAAI;AACdA,IAAAA,KAAK,CAACC,aAAN,GAAsB,sBAAtB;AACAb,IAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,MAAAA,KAAF;AAASV,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,KAAnB,CAAD,CAAR;AACD,GARI,CAAP;AASD,CAXM;AAaP,OAAO,MAAMK,aAAa,GAAIC,kBAAD,IAA8B1B,QAAD,IAA+D;AACvHA,EAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,IAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,GAAlB,CAAD,CAAR;AACA,SAAO1B,iBAAiB,CACrB+B,aADI,CACUC,kBADV,EAEJrB,IAFI,CAECC,QAAQ,IAAI;AAChB,UAAM;AAAEgB,MAAAA;AAAF,QAAchB,QAAQ,CAACG,IAA7B;AACAT,IAAAA,QAAQ,CAACH,OAAO,CAAC8B,cAAR,CAAuB;AAAEL,MAAAA;AAAF,KAAvB,CAAD,CAAR;AACD,GALI,EAMJX,KANI,CAMEC,KAAK,IAAI;AACdA,IAAAA,KAAK,CAACC,aAAN,GAAsB,sBAAtB;AACAb,IAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,MAAAA,KAAF;AAASV,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,KAAnB,CAAD,CAAR;AACD,GATI,CAAP;AAUD,CAZM;AAcP,OAAO,MAAMQ,aAAa,GAAIN,OAAD,IAAmBtB,QAAD,IAA+D;AAC5GA,EAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,IAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,GAAlB,CAAD,CAAR;AACA,SAAO1B,iBAAiB,CACrBkC,aADI,CACUN,OADV,EAEJjB,IAFI,CAEC,MAAM;AACVL,IAAAA,QAAQ,CAACH,OAAO,CAACgC,cAAR,CAAuB;AAAEP,MAAAA;AAAF,KAAvB,CAAD,CAAR;AACD,GAJI,EAKJX,KALI,CAKEC,KAAK,IAAI;AACdA,IAAAA,KAAK,CAACC,aAAN,GAAsB,sBAAtB;AACAb,IAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,MAAAA,KAAF;AAASV,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,KAAnB,CAAD,CAAR;AACD,GARI,CAAP;AASD,CAXM;AAaP,OAAO,MAAMU,oBAAoB,GAAG,CAACC,GAAD,EAAWC,MAAX,KAA+BhC,QAAD,IAA+D;AAC/HA,EAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,IAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,GAAlB,CAAD,CAAR;AACA,SAAO1B,iBAAiB,CACrBuC,uBADI,CACoBF,GADpB,EACyBC,MADzB,EAEJ3B,IAFI,CAEC,MAAM;AACVL,IAAAA,QAAQ,CAACH,OAAO,CAACqC,qBAAR,CAA8B;AAAEH,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAA9B,CAAD,CAAR;AACD,GAJI,EAKJrB,KALI,CAKEC,KAAK,IAAI;AACdA,IAAAA,KAAK,CAACC,aAAN,GAAsB,8BAAtB;AACAb,IAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,MAAAA,KAAF;AAASV,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,KAAnB,CAAD,CAAR;AACD,GARI,CAAP;AASD,CAXM;AAaP,OAAO,MAAMe,cAAc,GAAIJ,GAAD,IAAe/B,QAAD,IAA+D;AACzGA,EAAAA,QAAQ,CAACH,OAAO,CAACI,SAAR,CAAkB;AAAEC,IAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAAtB,GAAlB,CAAD,CAAR;AACA,SAAO1B,iBAAiB,CACrByC,cADI,CACWJ,GADX,EAEJ1B,IAFI,CAEC,MAAM;AACVL,IAAAA,QAAQ,CAACH,OAAO,CAACuC,eAAR,CAAwB;AAAEL,MAAAA;AAAF,KAAxB,CAAD,CAAR;AACD,GAJI,EAKJpB,KALI,CAKEC,KAAK,IAAI;AACdA,IAAAA,KAAK,CAACC,aAAN,GAAsB,uBAAtB;AACAb,IAAAA,QAAQ,CAACH,OAAO,CAACiB,UAAR,CAAmB;AAAEF,MAAAA,KAAF;AAASV,MAAAA,QAAQ,EAAEN,SAAS,CAACwB;AAA7B,KAAnB,CAAD,CAAR;AACD,GARI,CAAP;AASD,CAXM","sourcesContent":["import * as requestFromServer from \"./productsCrud\";\r\nimport {productsSlice, callTypes} from \"./productsSlice\";\r\n\r\nconst {actions} = productsSlice;\r\n\r\nexport const fetchProducts = (queryParams: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.list }));\r\n  return requestFromServer\r\n    .findProducts(queryParams)\r\n    .then(response => {\r\n      const { totalCount, entities } = response.data;\r\n      dispatch(actions.productsFetched({ totalCount, entities }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find products\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.list }));\r\n    });\r\n};\r\n\r\nexport const fetchProduct = (id: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  if (!id) {\r\n    return dispatch(actions.productFetched({ productForEdit: undefined }));\r\n  }\r\n\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .getProductById(id)\r\n    .then(response => {\r\n      const product = response.data;\r\n      dispatch(actions.productFetched({ productForEdit: product }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't find product\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteProduct = (id: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteProduct(id)\r\n    .then(response => {\r\n      dispatch(actions.productDeleted({ id }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete product\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const createProduct = (productForCreation: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .createProduct(productForCreation)\r\n    .then(response => {\r\n      const { product } = response.data;\r\n      dispatch(actions.productCreated({ product }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't create product\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateProduct = (product: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateProduct(product)\r\n    .then(() => {\r\n      dispatch(actions.productUpdated({ product }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update product\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const updateProductsStatus = (ids: any, status: number) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .updateStatusForProducts(ids, status)\r\n    .then(() => {\r\n      dispatch(actions.productsStatusUpdated({ ids, status }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't update products status\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n\r\nexport const deleteProducts = (ids: any) => (dispatch: (arg0: { payload: any; type: string; }) => void) => {\r\n  dispatch(actions.startCall({ callType: callTypes.action }));\r\n  return requestFromServer\r\n    .deleteProducts(ids)\r\n    .then(() => {\r\n      dispatch(actions.productsDeleted({ ids }));\r\n    })\r\n    .catch(error => {\r\n      error.clientMessage = \"Can't delete products\";\r\n      dispatch(actions.catchError({ error, callType: callTypes.action }));\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}