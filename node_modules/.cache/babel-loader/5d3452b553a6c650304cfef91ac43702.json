{"ast":null,"code":"// eslint-disable-next-line\nimport specificationTableMock from \"./specificationTableMock\";\nimport MockUtils from \"./mock.utils\";\nexport default function mockSpecifications(mock) {\n  mock.onPost(\"api/specifications\").reply(({\n    data\n  }) => {\n    const {\n      specification\n    } = JSON.parse(data);\n    const {\n      carId,\n      value = \"\",\n      specId\n    } = specification;\n    const id = generateSpecificationId();\n    const newSpecification = {\n      id,\n      carId: +carId,\n      value,\n      specId: +specId\n    };\n    specificationTableMock.push();\n    return [200, {\n      specification: newSpecification\n    }];\n  });\n  mock.onPost(/api\\/specificationsfind\\/\\d+/).reply(config => {\n    // const urls = config.url.split(\"/\");\n    const urls = config.url;\n    const id = urls;\n    const mockUtils = new MockUtils();\n    const {\n      queryParams\n    } = JSON.parse(config.data);\n    const specifications = specificationTableMock.filter( // el => el.carId === +id\n    el => el.carId);\n    const result = [];\n    specifications.forEach(el => result.push(wrapSpecification(el)));\n    const filterdSpecifications = mockUtils.baseFilter(result, queryParams);\n    return [200, filterdSpecifications];\n  });\n  mock.onPost(\"api/specifications/deleteSpecifications\").reply(config => {\n    const {\n      ids\n    } = JSON.parse(config.data);\n    ids.forEach(id => {\n      const index = specificationTableMock.findIndex(el => el.id === id);\n\n      if (index > -1) {\n        specificationTableMock.splice(index, 1);\n      }\n    });\n    return [200];\n  });\n  mock.onGet(/api\\/specifications\\/\\d+/).reply(config => {\n    // const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    const id = config.url; // const spec = specificationTableMock.find(el => el.id === +id);\n\n    const spec = specificationTableMock.find(el => el.id);\n\n    if (!spec) {\n      return [400];\n    }\n\n    const specification = wrapSpecification(spec);\n    return [200, specification];\n  });\n  mock.onPut(/api\\/specifications\\/\\d+/).reply(config => {\n    // const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    const id = config.url;\n    const {\n      specification\n    } = JSON.parse(config.data); // const index = specificationTableMock.findIndex(el => el.id === +id);\n\n    const index = specificationTableMock.findIndex(el => el.id);\n\n    if (!index) {\n      return [400];\n    }\n\n    specificationTableMock[index] = { ...specification\n    };\n    return [200];\n  });\n  mock.onDelete(/api\\/specifications\\/\\d+/).reply(config => {\n    // const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\n    const id = config.url; // const index = specificationTableMock.findIndex(el => el.id === +id);\n\n    const index = specificationTableMock.findIndex(el => el.id);\n    specificationTableMock.splice(index, 1); // if (!index === -1) {\n    //   return [400];\n    // }\n\n    return [200];\n  });\n}\n\nfunction generateSpecificationId() {\n  const ids = specificationTableMock.map(el => el.id);\n  const maxId = Math.max(...ids);\n  return maxId + 1;\n}\n\nfunction wrapSpecification(specification) {\n  const newSpec = { ...specification\n  }; // newSpec.name = getSpecNameById(newSpec.specId);\n\n  getSpecNameById(newSpec.specId);\n  return newSpec;\n}\n\nfunction getSpecNameById(specId) {\n  const specs = [\"Seats\", \"Fuel Type\", \"Stock\", \"Door count\", \"Engine\", \"Transmission\", \"Drivetrain\", \"Combined MPG\", \"Warranty\", \"Wheels\"];\n  return specs[specId];\n}","map":{"version":3,"sources":["/home/khatnaa/Desktop/project/src/app/modules/ECommerce/__mocks__/mockSpecification.tsx"],"names":["specificationTableMock","MockUtils","mockSpecifications","mock","onPost","reply","data","specification","JSON","parse","carId","value","specId","id","generateSpecificationId","newSpecification","push","config","urls","url","mockUtils","queryParams","specifications","filter","el","result","forEach","wrapSpecification","filterdSpecifications","baseFilter","ids","index","findIndex","splice","onGet","spec","find","onPut","onDelete","map","maxId","Math","max","newSpec","getSpecNameById","specs"],"mappings":"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","sourcesContent":["// eslint-disable-next-line\r\nimport specificationTableMock from \"./specificationTableMock\";\r\nimport MockUtils from \"./mock.utils\";\r\nimport MockAdapter from \"axios-mock-adapter/types\";\r\nimport { Specifications } from '../pages/products/product-specifications/Specifications';\r\n\r\nexport default function mockSpecifications(mock: MockAdapter) {\r\n  mock.onPost(\"api/specifications\").reply(({ data }) => {\r\n    const { specification } = JSON.parse(data);\r\n    const { carId, value = \"\", specId } = specification;\r\n    const id = generateSpecificationId();\r\n    const newSpecification = {\r\n      id,\r\n      carId: +carId,\r\n      value,\r\n      specId: +specId\r\n    };\r\n    specificationTableMock.push();\r\n    return [200, { specification: newSpecification }];\r\n  });\r\n\r\n  mock.onPost(/api\\/specificationsfind\\/\\d+/).reply(config => {\r\n    // const urls = config.url.split(\"/\");\r\n    const urls = config.url;\r\n    const id = urls;\r\n    const mockUtils = new MockUtils();\r\n    const { queryParams } = JSON.parse(config.data);\r\n    const specifications = specificationTableMock.filter(\r\n      // el => el.carId === +id\r\n      el =>el.carId\r\n    );\r\n    const result:any = [];\r\n    specifications.forEach(el => result.push(wrapSpecification(el)));\r\n    const filterdSpecifications = mockUtils.baseFilter(result, queryParams);\r\n\r\n    return [200, filterdSpecifications];\r\n  });\r\n\r\n  mock.onPost(\"api/specifications/deleteSpecifications\").reply(config => {\r\n    const { ids } = JSON.parse(config.data);\r\n    ids.forEach((id: number) => {\r\n      const index = specificationTableMock.findIndex(el => el.id === id);\r\n      if (index > -1) {\r\n        specificationTableMock.splice(index, 1);\r\n      }\r\n    });\r\n    return [200];\r\n  });\r\n\r\n  mock.onGet(/api\\/specifications\\/\\d+/).reply(config => {\r\n    // const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const id = config.url;\r\n    // const spec = specificationTableMock.find(el => el.id === +id);\r\n    const spec = specificationTableMock.find(el => el.id);\r\n    if (!spec) {\r\n      return [400];\r\n    }\r\n\r\n    const specification = wrapSpecification(spec);\r\n\r\n    return [200, specification];\r\n  });\r\n\r\n  mock.onPut(/api\\/specifications\\/\\d+/).reply(config => {\r\n    // const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const id = config.url;\r\n    const { specification } = JSON.parse(config.data);\r\n    // const index = specificationTableMock.findIndex(el => el.id === +id);\r\n    const index = specificationTableMock.findIndex(el => el.id);\r\n    if (!index) {\r\n      return [400];\r\n    }\r\n\r\n    specificationTableMock[index] = { ...specification };\r\n    return [200];\r\n  });\r\n\r\n  mock.onDelete(/api\\/specifications\\/\\d+/).reply(config => {\r\n    // const id = config.url.match(/api\\/specifications\\/(\\d+)/)[1];\r\n    const id = config.url;\r\n    // const index = specificationTableMock.findIndex(el => el.id === +id);\r\n    const index = specificationTableMock.findIndex(el => el.id);\r\n    specificationTableMock.splice(index, 1);\r\n    // if (!index === -1) {\r\n    //   return [400];\r\n    // }\r\n\r\n    return [200];\r\n  });\r\n}\r\n\r\nfunction generateSpecificationId() {\r\n  const ids = specificationTableMock.map(el => el.id);\r\n  const maxId = Math.max(...ids);\r\n  return maxId + 1;\r\n}\r\n\r\nfunction wrapSpecification(specification: { id: number; carId: number; specId: number; value: string; _userId: number; _createdDate: string; _updatedDate: string; }) {\r\n  const newSpec = { ...specification };\r\n  // newSpec.name = getSpecNameById(newSpec.specId);\r\n  getSpecNameById(newSpec.specId);\r\n  return newSpec;\r\n}\r\n\r\nfunction getSpecNameById(specId: number) {\r\n  const specs = [\r\n    \"Seats\",\r\n    \"Fuel Type\",\r\n    \"Stock\",\r\n    \"Door count\",\r\n    \"Engine\",\r\n    \"Transmission\",\r\n    \"Drivetrain\",\r\n    \"Combined MPG\",\r\n    \"Warranty\",\r\n    \"Wheels\"\r\n  ];\r\n  return specs[specId];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}